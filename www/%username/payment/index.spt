import stripe

from liberapay.utils import form_post_success, get_participant, group_by

[---]

participant = get_participant(state, restrict=True)

if request.method == 'POST':
    account_pk = request.body.get_int('account_pk')
    action = request.body.get_choice('action', ('disconnect', 'refresh'), default='disconnect')
    msg = ''
    if action == 'disconnect':
        account = website.db.one("""
            UPDATE payment_accounts
               SET is_current = NULL
             WHERE participant = %s
               AND pk = %s
         RETURNING *
        """, (participant.id, account_pk))
        if account and account.provider == 'stripe':
            try:
                stripe.oauth.OAuth.deauthorize(stripe_user_id=account.id)
            except stripe.oauth_error.InvalidClientError as e:
                expected = (
                    "No such user: " in str(e) or
                    "This application is not connected to stripe account" in str(e)
                )
                if not expected:
                    website.warning("unexpected error message: " + str(e))
        msg = _("The payment account has been successfully disconnected.")
    elif action == 'refresh':
        account = website.db.one("""
            SELECT *
              FROM payment_accounts
             WHERE participant = %s
               AND pk = %s
        """, (participant.id, account_pk))
        if not account:
            raise response.invalid_input(account_pk, 'account_pk', 'body')
        if account.provider == 'stripe':
            try:
                stripe_account = stripe.Account.retrieve(account.id)
            except stripe.error.PermissionError as e:
                website.db.run("""
                    UPDATE payment_accounts
                       SET is_current = null
                         , authorized = false
                     WHERE id = %s
                """, (account.id,))
                msg = _("This payment account is no longer accessible. It is now disconnected.")
            else:
                website.db.run("""
                    UPDATE payment_accounts
                       SET country = %(country)s
                         , default_currency = %(default_currency)s
                         , charges_enabled = %(charges_enabled)s
                         , display_name = %(display_name)s
                     WHERE provider = 'stripe'
                       AND id = %(account_id)s
                """, dict(
                    country=stripe_account.country,
                    default_currency=stripe_account.default_currency.upper(),
                    charges_enabled=stripe_account.charges_enabled,
                    display_name=stripe_account.settings.dashboard.display_name,
                    account_id=stripe_account.id,
                ))
                msg = _("The data has been successfully refreshed.")
        else:
            raise response.error(400, f"refresh isn't implemented for provider {account.provider}")
    form_post_success(state, msg=msg, redirect_url=request.path.raw)

accounts = website.db.all("""
    SELECT *
      FROM payment_accounts
     WHERE participant = %s
       AND is_current IS true
  ORDER BY connection_ts
""", (participant.id,))
accounts_by_provider = group_by(accounts, lambda a: a.provider)
paypal_accounts = accounts_by_provider.get('paypal')
stripe_accounts = accounts_by_provider.get('stripe')

countries = set(a.country for a in accounts)
country = list(countries)[0] if len(countries) == 1 else participant.guessed_country

has_paypal_but_not_stripe = (
    paypal_accounts and not stripe_accounts and
    country in constants.PAYOUT_COUNTRIES['stripe']
)

has_statement = len(participant.get_statement_langs()) > 0
allow_connect = (
    participant.email is not None and
    participant.username[0] != '~' and
    has_statement
)

if participant.payment_providers > 0:
    participant.mark_notifications_as_read('payment_account_required')

title = participant.username
subhead = _("Payment Processors")

[---] text/html
% from "templates/macros/icons.html" import fontawesome, glyphicon

% extends "templates/layouts/settings.html"

% block content

    % if not participant.email
        <p class="alert alert-warning">{{ _(
            "You have to {link_open}confirm your email address{link_close} before "
            "you can start to receive donations."
            , link_open=('<a href="%s">'|safe) % participant.path('emails/')
            , link_close='</a>'|safe
        ) }}</p>
    % elif participant.username[0] == '~'
        <p class="alert alert-warning">{{ _(
            "You have to {link_open}set your username{link_close} before you can "
            "start to receive donations."
            , link_open=('<a href="%s">'|safe) % participant.path('edit/username')
            , link_close='</a>'|safe
        ) }}</p>
    % elif not has_statement
        <p class="alert alert-warning">{{ _(
            "You have to {link_open}add a profile description{link_close} before "
            "you can start to receive donations."
            , link_open=('<a href="%s">'|safe) % participant.path('edit/statement')
            , link_close='</a>'|safe
        ) }}</p>
    % endif

    <p>{{ _(
        "To receive donations you must connect at least one account from a "
        "supported payment processor. This page allows you to do so."
    ) }}</p>

    <p class="text-info">{{ glyphicon('info-sign') }} {{ _(
        "Donors do not need to connect any payment account below, they are only "
        "necessary to receive money."
    ) }}</p>

    % if has_paypal_but_not_stripe
    <p class="alert alert-warning">{{ _(
        "You've connected a PayPal account but no Stripe account. We strongly "
        "recommend that you also connect a Stripe account, because it's "
        "{link_open}better than PayPal{link_close} in several ways, for both "
        "you and your donors.",
        link_open='<a href="/about/payment-processors">'|safe,
        link_close='</a>'|safe,
    ) }}</p>
    % elif not accounts
    <p class="text-info">{{ glyphicon('info-sign') }} {{ _(
        "We recommend connecting both Stripe and PayPal if they're both available "
        "in your country."
    ) }}</p>
    % endif

    % include "templates/sandbox-warning.html"

    <h3>Stripe</h3>
    <p>{{ _(
        "With Stripe your donors can pay by card or direct debit directly from the "
        "Liberapay website. (Direct debits are currently only supported from Euro "
        "bank accounts.)"
    ) }}</p>
    % if stripe_accounts
    <div>
        % for account in stripe_accounts
        <form class="card card-default" action="" method="POST">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="account_pk" value="{{ account.pk }}" />
            <button class="corner-icon fa fa-close" name="action" value="disconnect"
                    title="{{ _('Disconnect') }}"></button>
            <button class="corner-icon fa fa-refresh" name="action" value="refresh"
                    title="{{ _('Refresh') }}"></button>
            % if account.display_name
            <h4>{{ account.display_name }}</h4>
            {{ _("Account ID: {0}", account.id) }}<br>
            % else
            <h4>{{ account.id }}</h4>
            % endif
            <p>
            {{ _("Country: {0}", Country(account.country)) }}<br>
            % if account.default_currency
            {{ _("Currency: {0}", Currency(account.default_currency)) }}<br>
            % endif
            </p>
            <p class="text-muted">{{ _("Added on {date}", date=account.connection_ts.date()) }}</p>
            % if not account.charges_enabled
            <p class="text-warning">{{ glyphicon('exclamation-sign') }} {{ _(
                "This account cannot receive payments. To fix this, log in to the "
                "account and complete the verification process. After that, reconnect "
                "the account if you still see this message."
            ) }}</p>
            % endif
            <a href="https://dashboard.stripe.com/{{ account.id }}" target="_blank" rel="noopener noreferrer">{{
                fontawesome("external-link") }} {{ _(
                "Manage this {platform} account", platform="Stripe"
            ) }}</a>
        </form>
        % endfor
    </div>
    <br>
    % elif country in locale.countries
        % if country in constants.PAYOUT_COUNTRIES['stripe']
            <p class="text-success">{{ glyphicon('ok-sign') }} {{ _(
                "Available in {country}.", country=Country(country)
            ) }}</p>
        % else
            <p class="text-danger">{{ glyphicon('exclamation-sign') }} {{ _(
                "Not available in {country}.", country=Country(country)
            ) }}</p>
        % endif
    % endif

    <form action="/payment-providers/stripe/connect" method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        <input type="hidden" name="back_to" value="{{ request.path.raw }}" />
        % if stripe_accounts
        <button class="btn btn-default"{% if not allow_connect %} disabled{% endif %}>{{
            _("Connect another {platform_name} account", platform_name='Stripe')
        }}</button>
        % else
        <button class="btn btn-primary"{% if not allow_connect %} disabled{% endif %}>{{
            _("Connect {platform_name} account", platform_name='Stripe')
        }}</button>
        % endif
    </form>

    <br>
    <h3>PayPal</h3>
    <p>{{ _(
        "PayPal allows receiving money in many more countries than Stripe, "
        "but it's not as well integrated into Liberapay."
    ) }}</p>
    % if paypal_accounts
    <form action="" method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        % for account in paypal_accounts
        <div class="card card-default">
            <button class="corner-icon fa fa-close" name="account_pk" value="{{ account.pk }}"
                    title="{{ _('Disconnect') }}"></button>
            % if account.display_name
            <h4>{{ account.display_name }}</h4>
            {{ _("Account ID: {0}", account.id) }}<br>
            % else
            <h4>{{ account.id }}</h4>
            % endif
            <p>
            {{ _("Country: {0}", Country(account.country)) }}<br>
            % if account.default_currency
            {{ _("Currency: {0}", Currency(account.default_currency)) }}<br>
            % endif
            </p>
            <p class="text-muted">{{ _("Added on {date}", date=account.connection_ts.date()) }}</p>
            % if not account.verified
            <p class="text-warning">{{ glyphicon('exclamation-sign') }} {{
                _("The email address '{0}' is not verified.", account.id)
            }}</p>
            % elif account.charges_enabled == False
            <p class="text-warning">{{ glyphicon('exclamation-sign') }} {{ _(
                "This account cannot receive payments. To fix this, log in to the "
                "account and complete the verification process. After that, reconnect "
                "the account if you still see this message."
            ) }}</p>
            % endif
            <a href="https://www.paypal.com/signin" target="_blank" rel="noopener noreferrer">{{
                fontawesome("external-link") }} {{ _(
                "Manage this {platform} account", platform="PayPal"
            ) }}</a>
        </div>
        % endfor
    </form>
    <br>
    % elif country in locale.countries
        % if country in constants.PAYOUT_COUNTRIES['paypal']
            <p class="text-success">{{ glyphicon('ok-sign') }} {{ _(
                "Available in {country}.", country=Country(country)
            ) }}</p>
        % else
            <p class="text-danger">{{ glyphicon('exclamation-sign') }} {{ _(
                "Not available in {country}.", country=Country(country)
            ) }}</p>
        % endif
    % endif

    <form action="/payment-providers/paypal/add" method="GET">
        % if paypal_accounts
        <button class="btn btn-default"{% if not allow_connect %} disabled{% endif %}>{{
            _("Connect another {platform_name} account", platform_name='PayPal')
        }}</button>
        % else
        <button class="btn btn-primary"{% if not allow_connect %} disabled{% endif %}>{{
            _("Connect {platform_name} account", platform_name='PayPal')
        }}</button>
        % endif
    </form>
% endblock
