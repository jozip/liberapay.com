from datetime import timedelta
import json
from urllib.parse import urlsplit

from liberapay.exceptions import AuthRequired
from liberapay.models.participant import Participant
from liberapay.utils import b64encode_s, parse_int

COOKIE_TIMEOUT = timedelta(minutes=5)

[---]

request.allow('POST')

platform = website.platforms.get(request.path['platform'])
if platform is None:
    raise response.error(404)

body = request.body
try:
    action, then, user_id = body['action'], body['then'], body['user_id']
    p_id = body.get('p_id') or ''
except KeyError:
    raise response.error(400)

if action not in constants.ELSEWHERE_ACTIONS:
    raise response.error(400)

if action == 'connect':
    if user.ANON:
        raise AuthRequired
    user.require_write_permission()

p = (Participant.from_id(parse_int(p_id)) if p_id else None) or user

domain = ''
if user_id:
    if '/' in user_id:
        split = urlsplit(user_id.strip())
        user_id, domain = split.path.strip('/').lstrip('@'), split.netloc
        # â†‘ This use of `.netloc` instead of `.hostname` is intentional. It
        #   makes the domain name check below reject URLs which contain a
        #   username, password or port number in the netloc.
        del split
    else:
        user_id = user_id.strip().lstrip('@')
        split = user_id.rsplit('@', 1)
        if len(split) == 2:
            user_id, domain = split[0], split[1]
        else:
            domain = None
        del split
    if domain and not constants.DOMAIN_RE.match(domain):
        raise response.error(400, _("{0} is not a valid domain name.", repr(domain)))
    if platform.single_domain:
        domain = ''
        if body.get('user_id_type') == 'user_name':
            user_id = '>' + user_id
    else:
        if not (user_id and domain):
            raise response.error(400, _("The address you provided is not valid. Expected format: username@domain"))
        user_id, domain = '>' + user_id, domain.lower()

team = not p.ANON and p.kind != 'individual' and hasattr(platform, 'is_team_member')
if user_id or (not team and platform.single_domain) or action != 'connect':
    extra_scopes = body.get('extra_scopes', '').split()
    url, query_id, query_data = platform.get_auth_url(
        domain, extra_scopes=extra_scopes, user=user
    )

    cookie_name = platform.name+'_'+domain+('_' if domain else '')+query_id
    cookie_value = b64encode_s(json.dumps([query_data, action, then, user_id, p_id]))
    response.set_cookie(cookie_name, cookie_value, expires=COOKIE_TIMEOUT)

    response.redirect(url)

title = _("Which account?")

[---] text/html
% extends "templates/layouts/panel.html"

% block panel_body
<form action="" method="POST">
    % include "templates/form-repost.html"
    <input type="hidden" name="user_id_type" value="user_name" />
    % if platform.single_domain
    <p>{{ _("Please enter the name of the {0} account you would like to connect:",
            platform.display_name) }}</p>
    <input class="form-control" name="user_id" required
           placeholder="{{ _(
               'Name of the team\'s account on {platform}', platform=platform.display_name
           ) if p and p.kind == 'group' else _(
               'Name of the organization\'s account on {platform}', platform=platform.display_name
           ) if p and p.kind == 'organization' else _(
               '{0} username', platform.display_name)
           }}" />
    % else
    <p>{{ _("Please enter the address of the {0} account you would like to connect:",
            platform.display_name) }}</p>
    <input class="form-control" name="user_id" required
           placeholder="{{ platform.example_account_address(_) }}" />
    % endif
    <br>
    <button class="btn btn-primary">{{ _("Connect") }}</button>
</form>
% endblock
